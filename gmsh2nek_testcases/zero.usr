c-----------------------------------------------------------------------
c  nek5000 user-file template
c
c  user specified routines:
c     - uservp  : variable properties
c     - userf   : local acceleration term for fluid
c     - userq   : local source term for scalars
c     - userbc  : boundary conditions
c     - useric  : initial conditions
c     - userchk : general purpose routine for checking errors etc.
c     - userqtl : thermal divergence for lowMach number flows 
c     - usrdat  : modify element vertices 
c     - usrdat2 : modify mesh coordinates
c     - usrdat3 : general purpose routine for initialization
c     
c-----------------------------------------------------------------------
      subroutine uservp(ix,iy,iz,eg) ! set variable properties

c      implicit none

      integer ix,iy,iz,eg
     
      include 'SIZE'
      include 'TOTAL'
      include 'NEKUSE'

      integer e
c     e = gllel(eg)

      udiff  = 0.0
      utrans = 0.0

      return
      end
c-----------------------------------------------------------------------
      subroutine userf(ix,iy,iz,eg) ! set acceleration term
c
c     Note: this is an acceleration term, NOT a force!
c     Thus, ffx will subsequently be multiplied by rho(x,t).
c
c      implicit none

      integer ix,iy,iz,eg

      include 'SIZE'
      include 'TOTAL'
      include 'NEKUSE'

      integer e
c     e = gllel(eg)

      ffx = 0.0
      ffy = 0.0
      ffz = 0.0

      return
      end
c-----------------------------------------------------------------------
      subroutine userq(ix,iy,iz,eg) ! set source term

c      implicit none

      integer ix,iy,iz,eg

      include 'SIZE'
      include 'TOTAL'
      include 'NEKUSE'

      integer e
c     e = gllel(eg)

      qvol   = 0.0

      return
      end
c-----------------------------------------------------------------------
      subroutine userbc(ix,iy,iz,iside,eg) ! set up boundary conditions
c
c     NOTE ::: This subroutine MAY NOT be called by every process
c
c      implicit none

      integer ix,iy,iz,iside,eg

      include 'SIZE'
      include 'TOTAL'
      include 'NEKUSE'

c      if (cbc(iside,gllel(eg),ifield).eq.'v01')

      ux   = 0.0
      uy   = 0.0
      uz   = 1.0
      temp = 0.0

      return
      end
c-----------------------------------------------------------------------
      subroutine useric(ix,iy,iz,eg) ! set up initial conditions

c      implicit none

      integer ix,iy,iz,eg

      include 'SIZE'
      include 'TOTAL'
      include 'NEKUSE'

      ux   = 0.0
      uy   = 0.0
      uz   = 1.0
      temp = 0.0

      return
      end
c-----------------------------------------------------------------------
      subroutine userchk()

c      implicit none

      include 'SIZE'
      include 'TOTAL'
c      common /USRBC/ bcflag(lx1,ly1,lz1,lelt)

c      call outpost(bcflag,bcflag,bcflag,bcflag,bcflag,'bcf')
c      call gen_rea(2)
	  
      return
      end
c-----------------------------------------------------------------------
      subroutine userqtl ! Set thermal divergence

      call userqtl_scig 

      return
      end
c-----------------------------------------------------------------------
      subroutine usrdat()   ! This routine to modify element vertices

c      implicit none

      include 'SIZE'
      include 'TOTAL'

      return
      end
c-----------------------------------------------------------------------
      subroutine usrdat2()  ! This routine to modify mesh coordinates

c      implicit none

      include 'SIZE'
      include 'TOTAL'
	  
      common /USRBC/ bcflag(lx1,ly1,lz1,lelt)
	  
      integer iel,ifc,id_face
      integer isideset1
       
      ntot = nx1*ny1*nz1*nelv	  
      call rzero(bcflag,ntot)

c      isideset1 = 0
      do iel=1,nelv
      do ifc=1,2*ndim
c        if(cbc(ifc,iel,1).eq.'MSH') then
c          cbc(ifc,iel,1) = 'W  '
c        endif
        id_face = bc(5,ifc,iel,1)
        if (id_face.eq.1) then
           cbc(ifc,iel,1) = 'v  '
        elseif (id_face.eq.2) then
           cbc(ifc,iel,1) = 'O  '
        elseif (id_face.eq.3) then 
           cbc(ifc,iel,1) = 'W  '
        endif
      enddo
      enddo

cc      do iel=1,nelv
cc      do ifc=1,2*ndim
cc         if(cbc(ifc,iel,1).eq.'EXO') then
cc          call facind(i0,i1,j0,j1,k0,k1,nx1,ny1,nz1,ifc)
cc          do k=k0,k1
cc          do j=j0,j1
cc          do i=i0,i1
cc	          bcflag(i,j,k,iel) = 1.0
cc          enddo
cc          enddo
cc          enddo
cc          cbc(ifc,iel,1) = 'W  '
cc         endif
cc      enddo
cc      enddo
	  
CC      isideset1 = glsum(isideset1,1)

C      write(6,*) "isideset1 = ", isideset1
      return
      end
c-----------------------------------------------------------------------
      subroutine usrdat3()

c      implicit none

      include 'SIZE'
      include 'TOTAL'

      return
      end
